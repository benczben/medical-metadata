openapi: 3.0.0
info:
  description: "This is the static API documentation for the project called medical-metadata which deals as a proof of concept for the master thesis of Bence Slajch√≥ @Alpen-Adria-University-Klagenfurt. Supervisors: O.Univ.-Prof. Dipl.-Ing. Dr. Johann Eder; Dr.phil. Volodymyr Shekhovtsov"
  version: "1.3.0"
  title: "Medical Metadata"
  contact:
    email: "slajchobence@gmail.com"

tags:
  - name: dataset
    description: These routes are handling dataset related operations. The datasets are equal to collections in biobank terminology. The datasets are generated on demand based on the initial uninary dataset of ftp://anonftp.niehs.nih.gov/ntp-cebs/datatype/URINALYSIS/ 
  - name: search
    description: These routes are handling search operations. The search is performed on two possible levels. The one level is LOINC realated search. The other level is metadata related search. They co-exist and a seperation is not logically suitable.
  - name: metadata interface
    description: These routes are handling metadata related operations. The metadata can be loaded into the system in two ways. One way is via the user interface where the user is accompanied in the porcess in the user interface. The second way is via the API where based on the API specification the user created their own metadata file which can be loaded into the system.
  - name: aggregator
    description: These routes are helping the user at the metadata creation. All of these routes are used in the data aggregator, where the user can create their own aggregated metadata which then can be loaded into the system.

servers:
  - url: localhost:3001
    description: development server

paths:
  # dataset creation
  /api/datasets:
    post:
      tags:
      - dataset
      summary: Creates datasets with a certain set of rows. The data properties are based on the base dataset
      description: dataset related route description, the base dataset is to be found under ftp://anonftp.niehs.nih.gov/ntp-cebs/datatype/URINALYSIS/
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                numberOfDatasets:
                  type: "integer"
                  example: 1
                numberOfRows:
                  type: "integer"
                  example: 100
      responses:
        "200":
          description: successful creation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
  # Data collection names retrival
  /api/datainfo/collectionnames:
    get:
      tags:
      - dataset
      summary: "returns the names of the collecitons which were generated"
      description: "the returned data contains an array of colelction names"
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseCollectionNamesGet"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
  # Data collections deletion
  /api/datainfo/collections:
    delete:
      tags:
      - "dataset"
      summary: "delete all collection raw data"
      description: "regardless if the collection was generated by the system or uploaded from an external source, all collections will be deleted"
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseCollectionsDelete"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
  # Data collections deletion for a specific collection
  /api/datainfo/collection:
    delete:
      tags:
      - "dataset"
      summary: "deletes collection data for a specific collection"
      description: "a collection's name is passed to this route and it will delete all the corresponding data for it"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                collectionName:
                  type: "string"
                  example: "raw_medical_data_1"
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseCollectionDelete"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
  # Data collections deletion for a specific collection
  /api/collections/upload:
    post:
      tags:
      - "dataset"
      summary: "upload collection data from external source"
      description: |
        This route takes three files for a collection and the name for the collection as a string. The three files are describing the collection's data and it's schema and it's columns mapped to LOINC codes. 
        ---
        First file: Please provide a tab separated text file (.tsv extension) of your collection data.
        - The first row must contain the columns names.
        - Per collection only one text file is allowed, please flatten your data before upload.
        - Units must be submitted for a column with the "_unit" suffix attached to the column's name columnname_unit.
        ---
        Second file: Please provide a tab separated text file (.tsv extension) for mapping your data.
        - There are two columns.
        - The first column must contain exactly those columns names form the collection file, which you wish to see in the meta-schema. (eg. 'creatinine')
        - The second column contains the corresponding LOINC code (eg. 2161-8)
        ---
        Third file: Please provide a plain text file (.txt) of your collection schema.
        - There is no header row.
        - There is just one column.
        - The order of the data types is the same order as the data file columns are following each other.
        - The column contains the data type on the data attribute. Allowed data types are the following ones:
        - string - every type and length character string
        - integer - signed four-byte integer
        - double - double precision floating-point number
        - timestamp - date and time (no time zone)
      requestBody:
        required: true
        content:
          multipart/mixed:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: uploadedColelction
                collectionFile:
                  type: object
                  properties: 
                    text/tab-separated-values:
                      type: string
                schemaFile:
                  type: object
                  properties: 
                    text/plain:
                      type: string
                mappingFile:
                  type: object
                  properties: 
                    text/tab-separated-values:
                      type: string
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseCollectionUpload"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseCollectionUploadError500"
        "400":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseCollectionUploadError400"
        "406":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseCollectionUploadError406"
  # LOINC parent groups
  /api/loinc-parent-groups:
    get:
      tags:
      - search
      summary: returns all the loinc parent groups
      description: "without any filtering"
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseLoincParentGroups"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
  # relevant LOINC parent groups
  /api/loinc-relevant-parent-groups:
    get:
      tags:
      - search
      summary: returns only the parent groups which are in the researched domain
      description: "filters on an additional flag if the parent group is used in the project or not"
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseLoincParentGroups"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
  # LOINC grups which belong to a parent group
  /api/loinc-groups:
    get:
      tags:
      - search
      summary: "returns loinc groups which belong to a parent group"
      description: ""
      parameters:
        - in: query
          name: parentGroupIdList
          required: true
          schema:
            type: array
            example: [LG74-7, LG97-8, LG78-8]
            items:
              type: string
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseLoincGroups"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
  # LOINC terms
  /api/loinc-terms:
    get:
      tags:
      - search
      summary: "returns loinc terms which belong to the selected group"
      description: ""
      parameters:
        - in: query
          name: parentGroupIdList
          required: true
          schema:
            type: array
            example: [ "LG35818-0","LG34479-2","LG34487-5" ]
            items:
              type: string
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseLoincTerms"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
  # LOINC concept informations
  /api/loinc-fsn:
    get:
      tags:
      - search
      summary: "returns information of the loinc concept based on the loinc code"
      description: "Information is retrieved from the official loinc fhir api, yet there is an interceptor in the backend. This interceptor checks if the scaling of ORD is truly an ORD scaling or is it handled as NOM on meta level. If so, the SCALE_TYP is returned as NOM (even if the corresponding LOINC code has initially ORD scaling)"
      parameters:
        - in: query
          name: loinc_code
          required: true
          schema:
            type: string
            example: 32167-9
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseLoincFsn"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
  # LOINC values ranges for Qt
  /api/loinc-value-ranges:
    get:
      tags:
      - search
      summary: "returns information of available value ranges for the loinc code"
      description: "For Qt scaled LOINC code the bounds are returned"
      parameters:
        - in: query
          name: loincCode
          required: true
          schema:
            type: string
            example: 2161-8
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseValueRangeQt"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
  # LOINC values ranges for nom
  /api/column-values-nominal:
    get:
      tags:
      - search
      summary: "returns information of available nominal values for the loinc code"
      description: "For Nom scaled LOINC code the avalable values are returned"
      parameters:
        - in: query
          name: loincCode
          required: true
          schema:
            type: string
            example: 2161-8
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseValuesNom"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
  # LOINC values ranges for ord
  /api/column-values-ordinal:
    get:
      tags:
      - search
      summary: "returns information of available ordnal values for the loinc code"
      description: "For Ord scaled LOINC code the avalable values are returned"
      parameters:
        - in: query
          name: loincCode
          required: true
          schema:
            type: string
            example: 5794-3
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseValuesOrd"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
  # Meta data delivering
  /api/meta-data:
    get:
      tags:
      - search
      summary: "Returns content based meta information of the loinc concept in the meta-level"
      description: "This route utilizes the content based descriptors and delivers information about a property of a collection. Depending on the scaling additional parameters can be required"
      parameters:
        - in: query
          name: loinc_code
          required: true
          schema:
            type: string
            example: "2161-8"
        - in: query
          name: scaling
          required: true
          schema:
            type: string
            example: "QN"
        - in: query
          name: lower_bound
          required: false
          schema:
            type: string
            example: "0"
        - in: query
          name: upper_bound
          required: false
          schema:
            type: string
            example: "28.2"
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ApiResponseMetadataContentDescriptorQt"
                  - $ref: "#/components/schemas/ApiResponseMetadataContentDescriptorNom"
                  - $ref: "#/components/schemas/ApiResponseMetadataContentDescriptorOrd"
                  - $ref: "#/components/schemas/ApiResponseMetadataContentDescriptorDoc"
                  - $ref: "#/components/schemas/ApiResponseMetadataContentDescriptorNar"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
  # metadata creation and deletion
  /api/metadata/metadimension:
    put:
      tags:
      - "metadata interface"
      summary: "loads the metadata into the system alongside custom principles"
      description: "the metadata config objects are neccessary to be found in a state which can be read by the system"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/metadataLoadingApi"
      responses:
        "200":
          description: "successful request"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
    delete:
      tags:
      - "metadata interface"
      summary: delete metadata for a collection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                collectionName:
                  type: "string"
                  example: "raw_medical_data_1"
      responses:
        "200":
          description: "successful request"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
  # metadata import from external file
  /api/metadata/export:
    post:
      tags:
      - "metadata interface"
      summary: "creates a JSON structured export file which includes metadata"
      description: "The metadata gets created alongside the parameters which the user passes to this endpoint. This data is the same which also gets accepted which the system is using for metadata creation directly into the system."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/metadataLoadingApi"
      responses:
        "200":
          description: "successful request"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
  # metadata import
  /api/metadata/import:
    post:
      tags:
      - "metadata interface"
      summary: "loads collection metadata into the system which was created by an external source"
      description: To offer a possibility to load directly metadata into the system (and not sharing collection data of any kind with the application) the metadata import interface was introduced. 
        It accepts a JSON file which contains all the needed metadata information which otherwise the system would create.
        The structure of the JSON file is described in detail in the thesis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: "successful request"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
  ### 
  /api/table-cols-for-scaling:
    get:
      tags:
      - "aggregator"
      summary: "returns a set of a certain scaled table columns"
      parameters:
        - in: query
          name: scaling
          required: true
          schema:
            type: string
            example: "nom"
        - in: query
          name: table_name
          required: true
          schema:
            type: string
            example: "collection_one"
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseTableColsForScaling"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"  
  /api/collection-list:
    get:
      tags:
      - "aggregator"
      summary: "list of collections"
      description: "not aggregated yet"
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseCollectionList"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"  
  /api/distinct-values:
    get:
      tags:
      - "aggregator"
      summary: "returns information of available ordinal values for the loinc code"
      description: "For Ord scaled LOINC code the available values are returned"
      parameters:
        - in: query
          name: column_name
          required: true
          schema:
            type: string
            example: "ur_bld"
        - in: query
          name: table_name
          required: true
          schema:
            type: string
            example: "collection_one"
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseOrdinalDistinctValues"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"  
  /api/ordinal-valuesets-for-loinc:
    get:
      tags:
      - "aggregator"
      summary: "list of available ordinal value sets"
      parameters:
        - in: query
          name: loincCode
          required: true
          schema:
            type: string
            example: "5794-3"
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseOrdinalValueSets"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"  
  /api/nominal-mapped-value:
    get:
      tags:
      - "aggregator"
      summary: "list of existing values to which the mapping can be done of a certain loinc"
      parameters:
        - in: query
          name: loincCode
          required: true
          schema:
            type: string
            example: "5778-6"
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseOrdinalNominalMappedValue"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"  
  /api/ordinal-valuesets-values:
    get:
      tags:
      - "aggregator"
      summary: "list of existing values of a certain value set for ordinal mapping"
      parameters:
        - in: query
          name: loincCode
          required: true
          schema:
            type: string
            example: "5778-6"
        - in: query
          name: valueSetName
          required: true
          schema:
            type: string
            example: "numeric scale"
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseOrdinalOrdinalValueSetValues"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"  
  /api/composite-content-descriptor:
    get:
      tags:
      - "composite descriptor"
      summary: "list of existing composite content descriptors"
      description: "composite content descriptors are such descriptors which can be defined by admins in the system. Such descriptors contain possibly multiple but at least one LOINC code. 
        Furthermore they also contain an operator which can be 'ANY' or 'ALL'. 
        ANY would apply at the search in the following way: if the composite key contains LOINC code 1 and LOINC code 2, then any collection would be returned by the query which contain either LOINC code 1 OR LOINC code 2 (maybe both). Example: 'Find all collections which contain any primary diagnosis'
        ALL would apply at the search in the following way: if the composite key contains LOINC code 1 and LOINC code 2, then only those collections will be returned which contain both LOINC code 1 AND LOINC code 2. Example: 'Find all collections which contain BMI related information'" 
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseCompositeContentDescriptorsGet"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"  
    delete:
      tags:
      - "composite descriptor"
      summary: "deleting existing composite content descriptors by their id-s"
      description: "As a pre-requisite the ID of the composite collection descriptor must be emitted with the get call of this route. Then the the id in a form of an array
        must be sent to the delete route and the those composite content descriptors will be deleted "
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                idList:
                  type: array
                  items: 
                    type: integer
                    example: [1, 2]
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseCompositeContentDescriptorsDelete"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"  
    post:
      tags:
      - "composite descriptor"
      summary: "creating new composite content descriptors"
      description: "To create composite content descriptors this route must be called with the required parameters.
        Composite content descriptors are such descriptors which can be defined by admins in the system. Such descriptors contain possibly multiple but at least one LOINC code. 
        Furthermore they also contains an operator which can be 'ANY' or 'ALL'. 
        ANY would apply at the search in the following way: if the composite key contains LOINC code 1 and LOINC code 2, then any collection would be returned by the query which contain either LOINC code 1 OR LOINC code 2 (maybe both). Example: 'Find all collections which contain any primary diagnosis'
        ALL would apply at the search in the following way: if the composite key contains LOINC code 1 and LOINC code 2, then only those collections will be returned which contain both LOINC code 1 AND LOINC code 2. Example: 'Find all collections which contain BMI related information'"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                compositeContentDescriptorName:
                  type: string
                  example: "Test descriptor"
                compositeContentDescriptorDescription:
                  type: string
                  example: "Test descriptor description which will be displayed as help test at search"
                operator:
                  type: string
                  example: "ANY"
                participatingLoincCodes:
                  type: array
                  items: 
                    type: object
                    properties:
                      loinc_code:
                        type: string
                  example: [
                    { loinc_code: "53120-2"},
                    { loinc_code: "33352-6"},
                    { loinc_code: "53561-7"},
                    { loinc_code: "48995-5"},
                    { loinc_code: "2161-8"},
                  ]
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseCompositeContentDescriptorsPost"
        "409":
          description: "conflict - composite keys exists already"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseErrorCompositeKeyExists"  
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
  /api/loinc-part-value:
    get:
      tags:
      - "search"
      summary: "Lists all the available LOINC part values from the system. Only those get listed which are exisitng in the metadata level in a form of a LOINC code as collection desctiptor."
      description: "This is a general route for any LOINC part values. LOINC's fully specified name consists of the LOINC code and six parts. These six parts are in sequential order: Component (1), Property(2), Time aspect(3), System(4), Scale(5), Method(6). 
        For this route the sequnetial number is required (1 / 2 / 3 / 4 / 5/ 6) and in return all distinct values are returned which are in the system as collection descriptors." 
      parameters:
        - in: query
          name: loincPartSelected
          required: true
          schema:
            type: string
            example: "2"
            enum: ["1", "2", "3", "4", "5", "6"]
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseLoincPartValue"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"  
  /api/collections-to-loinc:
    get:
      tags:
      - "search"
      summary: "Lists collections which are described by a set of LOINC codes."
      parameters:
        - in: query
          name: loincCodes
          required: true
          schema:
            type: array
            items: 
              type: string
              example: ["5794-3"]
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseCollectionToLoinc"
        "400":
          description: "no loinc code"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseCollectionToLoincNoCode"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"  
  /api/collection-to-loinc-part-value:
    get:
      tags:
      - "search"
      summary: "Lists all collections which satisfy the query."
      description: "If the search value of any LOINC part refers to a LOINC Part Value in the metadata level, a list of collections is returned which contain LOINC codes where the LOINC Part Values equals to the search value." 
      parameters:
        - in: query
          name: component
          required: false
          schema:
            type: string
            example: "ph"
        - in: query
          name: property
          required: false
          schema:
            type: string
            example: "PrThr"
        - in: query
          name: time_aspect
          required: false
          schema:
            type: string
            example: "Pt"
        - in: query
          name: system
          required: false
          schema:
            type: string
            example: "Urine"
        - in: query
          name: scale
          required: false
          schema:
            type: string
            example: "Nom"
        - in: query
          name: method
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseCollectionToLoincPartValue"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"  
  /api/loinc-codes-to-part-value:
    get:
      tags:
      - "search"
      summary: "Lists all LOINC codes for a collection which satisfy the query regarding the LOINC Part Value."
      description: "If the search value of any LOINC part refers to a LOINC Part Value in the metadata level and the collection name is specified, 
        then a list of LOINC codes is returned which are used are descriptors for the given collection." 
      parameters:
        - in: query
          name: component
          required: false
          schema:
            type: string
            example: "ph"
        - in: query
          name: property
          required: false
          schema:
            type: string
            example: "PrThr"
        - in: query
          name: time_aspect
          required: false
          schema:
            type: string
            example: "Pt"
        - in: query
          name: system
          required: false
          schema:
            type: string
            example: "Urine"
        - in: query
          name: scale
          required: false
          schema:
            type: string
            example: "Nom"
        - in: query
          name: method
          required: false
          schema:
            type: string
        - in: query
          name: collection
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseLoincCodesToPartValues"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"  
  /api/metalevel-loinc-codes:
    get:
      tags:
      - "search"
      summary: "List of all LOINC codes including the Long Common Names"
      description: "The list of the LOINC codes consist of those which are used on the metadata level as collection desctiptors.
        In this route all used LOINC codes are returned including their correcponding Long Common Name" 
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseMetalevelLoincCodes"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"  
  /api/loinc-code-operators:
    get:
      tags:
      - "composite descriptor"
      summary: "List of all possible opeartors which can be choosed from at the creation of a composite collection descriptor"
      description: "The list of such operators contains two possible elements: 'ALL' and 'ANY'. These two opeartors are implemented on system level.
        ANY would apply at the search in the following way: if the composite key contains LOINC code 1 and LOINC code 2, then any collection would be returned by the query which contain either LOINC code 1 OR LOINC code 2 (maybe both). Example: 'Find all collections which contain any primary diagnosis'
        ALL would apply at the search in the following way: if the composite key contains LOINC code 1 and LOINC code 2, then only those collections will be returned which contain both LOINC code 1 AND LOINC code 2. Example: 'Find all collections which contain BMI related information'" 
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseLoincCodeOperators"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"  
  /api/collections-to-composite-descriptors:
    get:
      tags:
      - "composite descriptor"
      summary: "Lists collections which satisfy the composite collection desctiptor"
      description: "The collections are returned which satisfy the composie collection descriptors (pre-requisite: an admin has defined such composite descriptors beforehand from which the user can then choose. Info about the dectiptor is provided).
        ANY would apply at the search in the following way: if the composite key contains LOINC code 1 and LOINC code 2, then any collection would be returned by the query which contain either LOINC code 1 OR LOINC code 2 (maybe both). Example: 'Find all collections which contain any primary diagnosis'
        ALL would apply at the search in the following way: if the composite key contains LOINC code 1 and LOINC code 2, then only those collections will be returned which contain both LOINC code 1 AND LOINC code 2. Example: 'Find all collections which contain BMI related information'" 
      parameters:
        - in: query
          name: operator
          required: false
          schema:
            type: string
            example: "ANY"
            enum: ["ANY", "ALL"]
        - in: query
          name: participatingCodes
          required: false
          schema:
            type: array
            items:
              type: string
              example: ["5794-3"]
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseCollectionsToCompositeDescriptors"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"  
  /api/metadata/quality-completeness:
    get:
      tags:
      - "metadata quality"
      summary: "Calculates the completeness of a a LOINC code which belong to a collection as a descriptor"
      parameters:
        - in: query
          name: loincCode
          required: true
          schema:
            type: string
            example: "2161-8"
        - in: query
          name: lowerBound
          required: true
          schema:
            type: integer
            minimum: 0
            maximum: 100
        - in: query
          name: upperBound
          required: true
          schema:
            type: integer
            minimum: 0
            maximum: 100
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseQualityCompleteness"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"  
  /api/metadata/quality-accuracy:
    get:
      tags:
      - "metadata quality"
      summary: "Calculates the completeness of a a LOINC code which belong to a collection as a descriptor"
      parameters:
        - in: query
          name: loincCode
          required: true
          schema:
            type: string
            example: "2161-8"
        - in: query
          name: accuracy
          required: true
          schema:
            type: array
            items:
              type: string
              example: ['low']
              enum: ['low', 'medium', 'high']
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseQualityAccuracy"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"  
  /api/metadata/quality-timeliness:
    get:
      tags:
      - "metadata quality"
      summary: "Calculates the completeness of a a LOINC code which belong to a collection as a descriptor"
      parameters:
        - in: query
          name: loincCode
          required: true
          schema:
            type: string
            example: "2161-8"
        - in: query
          name: lowerBound
          required: true
          schema:
            type: integer
            example: 0
        - in: query
          name: upperBound
          required: true
          schema:
            type: integer
            example: 365
        - in: query
          name: timelinessUnit
          required: true
          schema:
            type: string
            example: "day"
            enum: ["day", "month", "year"]
      responses:
        "200":
          description: "successful request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseQualityTimeliness"
        "500":
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"  
components:
  schemas:
    ApiResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        type:
          type: "string"
        message:
          type: "string"
    ApiResponseLoincParentGroups:
      type: "array"
      items:
        type: "object"
        properties:
          parent_group_id:
            type: string
            example: "LG74-7"
          parent_group:
            description: the name of the current parent group
            type: string
            example: "Urine<SAME:Comp|Prop|Sys><ROLLUP:Tm|Meth>"
    ApiResponseLoincGroups:
      type: "array"
      items:
        type: "object"
        properties:
          parent_group_id:
            type: string
            example: "LG74-7"
          group_id:
            type: string
            example: "LG36551-6"
          group_name:
            type: string
            example: "11-Dehydro thromboxane beta 2/Creatinine|MRto|Urine"
    ApiResponseLoincTerms:
      type: "array"
      items:
        type: "object"
        properties:
          loinc_code:
            type: string
            example: "32167-9"
          long_common_name:
            type: string
            example: "Clarity of Urine"
          group_id:
            type: string
            example: "LG35818-0"
    ApiResponseMetadataContentDescriptorQt:
      type: "array"
      items:
        type: "object"
        properties:
          meta:
            $ref: "#/components/schemas/aggregateMetaInfoQt"
    ApiResponseMetadataContentDescriptorNom:
      type: "array"
      items:
        type: "object"
        properties:
          meta:
            $ref: "#/components/schemas/aggregateMetaInfoNom"
    ApiResponseMetadataContentDescriptorOrd:
      type: "array"
      items:
        type: "object"
        properties:
          meta:
            $ref: "#/components/schemas/aggregateMetaInfoOrd"
    ApiResponseMetadataContentDescriptorDoc:
      type: "array"
      items:
        type: "object"
        properties:
          meta:
            $ref: "#/components/schemas/aggregateMetaInfoDoc"
    ApiResponseMetadataContentDescriptorNar:
      type: "array"
      items:
        type: "object"
        properties:
          meta:
            $ref: "#/components/schemas/aggregateMetaInfoNar"
    aggregateMetaInfoQt:
      type: array
      items: 
        type: object
        properties:
          aggregate_value: 
            type: number
            example: 0
          occurance_count: 
            type: number
            example: 1
          source_database:
            type: string
            example: "raw_medical_data_1"
          value_unit: 
            type: string
            example: "mg/dL"
          min_value: 
            type: number
            example: 0
          max_value:
            type: number
            example: 2
          mean_value: 
            type: number
            example: 1
          median_value: 
            type: number
            example: 1.2
          min_updaed_at: 
            type: string
            format: date-time
            example: Sun Oct 06 2019 01:07:03 GMT+0000 (Coordinated Universal Time)
          max_updaed_at: 
            type: string
            format: date-time
            example: Thu Dec 27 2018 13:37:52 GMT+0000 (Coordinated Universal Time)
          mean_updaed_at: 
            type: string
            format: date-time
            example: Fri May 17 2019 19:22:27 GMT+0000 (Coordinated Universal Time)
          median_updaed_at: 
            type: string
            format: date-time
            example: Thu Dec 27 2018 13:37:52 GMT+0000 (Coordinated Universal Time)
    aggregateMetaInfoNom:
      type: array
      items: 
        type: object
        properties:
          aggregate_value: 
            type: number
            example: 0
          occurance_count: 
            type: number
            example: 1
          source_database:
            type: string
            example: "raw_medical_data_1"
          min_updaed_at: 
            type: string
            format: date-time
            example: Sun Oct 06 2019 01:07:03 GMT+0000 (Coordinated Universal Time)
          max_updaed_at: 
            type: string
            format: date-time
            example: Thu Dec 27 2018 13:37:52 GMT+0000 (Coordinated Universal Time)
          mean_updaed_at: 
            type: string
            format: date-time
            example: Fri May 17 2019 19:22:27 GMT+0000 (Coordinated Universal Time)
          median_updaed_at: 
            type: string
            format: date-time
            example: Thu Dec 27 2018 13:37:52 GMT+0000 (Coordinated Universal Time)
    aggregateMetaInfoOrd:
      type: array
      items: 
        type: object
        properties:
          aggregate_value: 
            type: number
            example: 0
          occurance_count: 
            type: number
            example: 1
          source_database:
            type: string
            example: "raw_medical_data_1"
          min_updaed_at: 
            type: string
            format: date-time
            example: Sun Oct 06 2019 01:07:03 GMT+0000 (Coordinated Universal Time)
          max_updaed_at: 
            type: string
            format: date-time
            example: Thu Dec 27 2018 13:37:52 GMT+0000 (Coordinated Universal Time)
          mean_updaed_at: 
            type: string
            format: date-time
            example: Fri May 17 2019 19:22:27 GMT+0000 (Coordinated Universal Time)
          median_updaed_at: 
            type: string
            format: date-time
            example: Thu Dec 27 2018 13:37:52 GMT+0000 (Coordinated Universal Time)
    aggregateMetaInfoDoc:
      type: array
      items: 
        type: object
        properties:
          aggregate_value: 
            type: number
            example: 0
          occurance_count: 
            type: number
            example: 1
          source_database:
            type: string
            example: "raw_medical_data_1"
          min_updaed_at: 
            type: string
            format: date-time
            example: Sun Oct 06 2019 01:07:03 GMT+0000 (Coordinated Universal Time)
          max_updaed_at: 
            type: string
            format: date-time
            example: Thu Dec 27 2018 13:37:52 GMT+0000 (Coordinated Universal Time)
          mean_updaed_at: 
            type: string
            format: date-time
            example: Fri May 17 2019 19:22:27 GMT+0000 (Coordinated Universal Time)
          median_updaed_at: 
            type: string
            format: date-time
            example: Thu Dec 27 2018 13:37:52 GMT+0000 (Coordinated Universal Time)
    aggregateMetaInfoNar:
      type: array
      items: 
        type: object
        properties:
          aggregate_value: 
            type: number
            example: 0
          occurance_count: 
            type: number
            example: 1
          source_database:
            type: string
            example: "raw_medical_data_1"
          min_updaed_at: 
            type: string
            format: date-time
            example: Sun Oct 06 2019 01:07:03 GMT+0000 (Coordinated Universal Time)
          max_updaed_at: 
            type: string
            format: date-time
            example: Thu Dec 27 2018 13:37:52 GMT+0000 (Coordinated Universal Time)
          mean_updaed_at: 
            type: string
            format: date-time
            example: Fri May 17 2019 19:22:27 GMT+0000 (Coordinated Universal Time)
          median_updaed_at: 
            type: string
            format: date-time
            example: Thu Dec 27 2018 13:37:52 GMT+0000 (Coordinated Universal Time)
    ApiResponseLoincFsn:
      type: "object"
      properties:
        COMPONENT:
          type: string
          example: "Clarity"
        PROPERTY:
          type: string
          example: "Type"
        SCALE_TYP:
          type: string
          example: "Nom"
        SYSTEM:
          type: string
          example: "Urine"
        TIME_ASPECT:
          type: string
          example: "Pt"
    ApiResponseError:
      type: "object"
      properties:
        status:
          type: "integer"
          format: "123"
          enum: [500]
        message:
          type: "string"
    ApiResponseErrorCompositeKeyExists:
      type: "object"
      properties:
        status:
          type: "integer"
          format: "123"
          enum: [409]
        error:
          type: "string"
    ApiResponseCollectionNamesGet:
      type: array
      items:
        type: string
        example: "collection_1, collection_2"
    ApiResponseCollectionsDelete:
      type: object
      properties:
        message:
          type: string
          example: "The following tables were deleted: collection_1"
    ApiResponseCollectionDelete:
      type: object
      properties:
        message:
          type: string
          example: "Colection raw_medical_data_1's data was dropped.\nColection raw_medical_data_1 was deleted from the collection directory.\nMapping entries for raw_medical_data_1 were deleted."
    ApiResponseValueRangeQt:
      type: object
      properties:
        min_value:
          type: number
          example: 0
        max_value:
          type: number
          example: 100
    ApiResponseValuesNom:
      type: object
      properties:
        distinct_values:
          type: string
          example: 'amber'
    ApiResponseValuesOrd:
      type: object
      properties:
        sequence_number:
          type: number
          example: 1
        value_set_value:
          type: string
          example: '1'
    metadataLoadingApi:
      type: object
      properties:
        collectionName:
          type: string
          example: 'customCollectionOne'
        accuracySupport:
          type: string
          enum: ['high', 'medium', 'low']
        ordinalAsNominal:
          type: boolean
        narrativeSupport:
          type: boolean
        documentSupport:
          type: boolean
        ordinalMapperObject:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: collection1
                description: 'First level of the tree - collection'
              name:
                type: string
                example: Urinary sample collection
              children:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "5794-3"
                      description: 'Second level of the tree - loinc'
                    name:
                      type: string
                      example: "5794-3"
                    children:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            description: 'Third level of the tree - value (origin)'
                            example: '1+'
                          name:
                            type: string
                            description: 'Third level of the tree - value (mapped onto)'
                            example: '1'
        nominalMappingConsidered:
          type: boolean
        nominalMappingObject:
          type: object
          properties:
            collectionName:
              description: the name of the property is the name of the collection
              type: array
              items: 
                type: object
                properties:
                  items:
                    type: object
                    properties:
                      loincCode: 
                        description: the name of the property is the loinc code
                        type: array
                        items:
                          type: object
                          properties:
                            aggregateValue:
                              type: string
                              example: "amber"
                            selectedValue:
                              type: string
                              example: "dark"
    ApiResponseCollectionList:
      type: "array"
      items:
        type: object
        properties:
          hasindexes:
            type: boolean
          hasrules:
            type: boolean
          hastriggers:
            type: boolean
          rowsecurity:
            type: boolean
          schemaname:
            type: string
            example: "public"
          tablename:
            type: string
            example: "collection_one"
          tableowner:
            type: string
            example: "postgres"
    ApiResponseTableColsForScaling:
      type: "array"
      items:
        type: object
        properties:
          column_name:
            type: string
            example: "ur_color"
          maps_to_loinc:
            type: string
            example: "5778-6"
          table_name:
            type: string
            example: "collection_one"
    ApiResponseOrdinalDistinctValues:
      type: "array"
      items:
        type: object
        properties:
          aggregate_value:
            type: string
            example: "0"
          column_name:
            type: string
            example: "ur_bld"
          loinc_code:
            type: string
            example: "5794-3"
          occurance_count:
            type: number
            example: 9
          source_database:
            type: string
            example: "collection_one"
    ApiResponseOrdinalValueSets:
      type: "array"
      items:
        type: object
        properties:
          value_set_name:
            type: string
            example: "numeric scale"
    ApiResponseOrdinalNominalMappedValue:
      type: "array"
      items:
        type: object
        properties:
          nominal_valiue:
            type: string
    ApiResponseOrdinalOrdinalValueSetValues:
      type: "array"
      items:
        type: object
        properties:
          loinc_code:
            type: string
            example: "5794-3"
          sequence_number:
            type: number
            example: 1
          value_set_name:
            type: string
            example: "numeric scale"
          value_set_value:
            type: string
            example: "1"
    ApiResponseCompositeContentDescriptorsGet:
      type: "array"
      items:
        type: object
        properties:
          code_operator:
            type: string
            example: "ANY"
            enum: ["ANY", "ALL"]
          description:
            type: string
            example: "The test composite decriptor returns collections which satisfy the decriptor"
          descriptor_name:
            type: string
            example: "Test composite content descriptor"
          id:
            type: number
            example: 1
          participating_codes:
            type: array
            items:
              type: string
              example: ["5794-3"]
    ApiResponseCompositeContentDescriptorsDelete:
      type: object
      properties:
        message:
          type: string
          example: "deleted"
          enum: ["deleted"]
    ApiResponseCompositeContentDescriptorsPost:
      type: object
      properties:
        insertedRowCount:
          type: integer
          example: 1
    ApiResponseLoincPartValue:
      type: array
      items:
        type: string
        example: "PrThr"
    ApiResponseCollectionToLoincPartValue:
      type: array
      items:
        type: string
        example: "raw_medical_data"
    ApiResponseLoincCodesToPartValues:
      type: array
      items:
        type: string
        example: "14413-9"
    ApiResponseMetalevelLoincCodes:
      type: array
      items:
        type: object
        properties:
          loinc_code:
            type: string
            example: "5794-3"
          long_common_name:
            type: string
            example: "Hemoglobin [Presence] in Urine by Test strip"
    ApiResponseLoincCodeOperators:
      type: array
      items:
        type: object
        properties:
          code_opertor:
            type: string
            example: "ANY"
            enum: ["ANY", "ALL"]
    ApiResponseCollectionsToCompositeDescriptors:
      type: array
      items:
        type: object
        properties:
          collection_name:
            type: string
            example: "raw_medical_data"
    ApiResponseCollectionUpload:
      type: object
      properties:
        message:
          type: string
          default: ok
    ApiResponseCollectionUploadError400:
      type: object
      properties:
        status:
          type: "integer"
          format: "123"
          enum: [400]
        message:
          type: string
          default: Provide a filename
    ApiResponseCollectionUploadError406:
      type: object
      properties:
        status:
          type: "integer"
          format: "123"
          enum: [406]
        message:
          type: string
          default: "Acceptable content type: for data and mapping -> text/tab-separated-values, for schema -> text/plain"
    ApiResponseCollectionUploadError500:
      type: object
      properties:
        status:
          type: "integer"
          format: "123"
          enum: [500]
        message:
          type: string
          example: "invalid input syntax for type timestamp: '0.8058'"
    ApiResponseCollectionToLoinc:
      type: array
      items:
        type: string
        example: ["colelction1", "collection2"]
    ApiResponseCollectionToLoincNoCode:
      type: object
      properties:
        message:
          type: string
          default: "no loinc code" 
    ApiResponseQualityCompleteness:
      type: array
      items:
        type: object
        properties:
          source_database: 
            type: string
            example: "raw_medical_data_1"
          collection_completeness: 
            type: number
            example: "53.93439343934393439300"
          null_value_count: 
            type: number
            example: "4006"
          occurance_count: 
            type: number
            example: "7748"
          standard_metadata_completeness: 
            type: number
            example: "48.48913462774848913500"
    ApiResponseQualityAccuracy:
      type: array
      items:
        type: object
        properties:
          collection_accuracy: 
            type: number
            example: "0.8055144586415602"
          source_database: 
            type: string
            example: "raw_medical_data_1"
          occurance_count: 
            type: number
            example: "160"
          tuple_accuracy: 
            type: string
            example: "low"
    ApiResponseQualityTimeliness:
      type: array
      items:
        type: object
        properties:
          collection_timeliness: 
            type: number
            example: 32.22394010559027
          source_database: 
            type: string
            example: "raw_medical_data_1"
          occurance_count: 
            type: number
            example: "1111"
          timeliness: 
            type: number
            example: 125
externalDocs:
  description: "LOINC Terminology Server Documentation"
  url: "https://loinc.org/fhir/"